<?xml version="1.0" encoding="UTF-8"?>
<!--/*
 * Copyright (c) 2005 TorbjÃ¶rn Gannholm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */-->
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:w="http://tobe.homelinux.net/weffo"
xmlns:axsl="http://www.w3.org/1999/XSL/TransformAlias"
>

<xsl:variable name="weffo-version">1.2</xsl:variable>

<xsl:namespace-alias stylesheet-prefix="axsl" result-prefix="xsl"/>

	<!-- generally,we just want to copy everything -->
	<xsl:template match="@*">
                <xsl:copy-of select="."/>
	</xsl:template>
	
	<xsl:template match="comment()">
		<axsl:comment><xsl:value-of select="."/></axsl:comment>
	</xsl:template>
	
	<xsl:template match="processing-instruction()">
		<axsl:processing-instruction name="{name(.)}"><xsl:value-of select="."/></axsl:processing-instruction>
	</xsl:template>
	
	<xsl:template match="text()"><xsl:copy/></xsl:template>
	
	<!-- utility function for handling one dynamic attribute -->
	<xsl:template name="attribute">
	<xsl:param name="nameValuePair"/>
		<xsl:variable name="name" select="substring-before($nameValuePair,',')"/>
		<xsl:variable name="value" select="substring-after($nameValuePair,',')"/>
		<axsl:attribute name="{$name}"><axsl:value-of select="{$value}"/></axsl:attribute>
	</xsl:template>
	
	<!-- utility function for handling a list of attributes -->
	<xsl:template name="attributes">
	<xsl:param name="attributeList"/>
		<xsl:variable name="nameValuePair" select="substring-before($attributeList,';')"/>
		<xsl:choose>
			<xsl:when test="$nameValuePair">
				<xsl:call-template name="attribute">
					<xsl:with-param name="nameValuePair" select="$nameValuePair"/>
				</xsl:call-template>
				<xsl:call-template name="attributes">
					<xsl:with-param name="attributeList" select="substring-after($attributeList,';')"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="attribute">
					<xsl:with-param name="nameValuePair" select="$attributeList"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<!-- handle elements -->
	<xsl:template name="element" match="*">
		<xsl:copy>
                        <xsl:apply-templates select="@*[name() != 'w:content' and name() != 'w:text' and name() != 'w:foreach' and name() != 'w:attributes']"/>
			<xsl:if test="@w:attributes">
				<xsl:call-template name="attributes">
					<xsl:with-param name="attributeList" select="@w:attributes"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:choose>
				<!-- for elements with w:content, replace content mith marked-up data -->
				<xsl:when test="@w:content">
					<axsl:copy-of select="{@w:content}"/>
				</xsl:when>
				<!-- for elements with w:text, replace content with text-data -->
				<xsl:when test="@w:text">
					<axsl:value-of select="{@w:text}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:apply-templates/>
				</xsl:otherwise>
			</xsl:choose>
                </xsl:copy>
	</xsl:template>
	
	<!-- for the root, start setting this up as a xsl stylesheet -->
	<xsl:template match="/">
		<xsl:comment>Generated by weffo version <xsl:value-of select="$weffo-version"/></xsl:comment>
		<axsl:stylesheet version="1.0">
			<!-- set up weffo-parameters -->
			<xsl:for-each select="processing-instruction()[name(.)='weffo-param']">
				<xsl:call-template name="weffo-param"/>
			</xsl:for-each>
			<!-- create the single template -->
			<axsl:template match="/">
				<axsl:comment>Generated by weffo version <xsl:value-of select="$weffo-version"/></axsl:comment>
				<xsl:apply-templates/>
			</axsl:template>
		</axsl:stylesheet>
	</xsl:template>
	
	<!-- for elements with w:foreach, repeat content -->
	<xsl:template match="*[@w:foreach]">
		<axsl:for-each select="{@w:foreach}">
			<xsl:call-template name="element"/>
		</axsl:for-each>
	</xsl:template>
	
	<!-- ignore elements with w:demo -->
	<xsl:template match="*[@w:demo]"/>
	
	<!-- handle weffo-param p-i, handle early, then ignore -->
	<xsl:template name="weffo-param">
		<axsl:param name="{substring-before(.,'=')}">
			<xsl:value-of select="substring-after(.,'=')"/>
		</axsl:param>
	</xsl:template>

	<xsl:template match="processing-instruction()[name(.)='weffo-param']"/>
	
	<!-- handle weffo-pi p-i -->
	<xsl:template match="processing-instruction()[name(.)='weffo-pi']">
		<axsl:processing-instruction name="{substring-before(.,' ')}">
			<axsl:value-of select="{substring-after(.,' ')}"/>
		</axsl:processing-instruction>
	</xsl:template>
	
</xsl:stylesheet>
